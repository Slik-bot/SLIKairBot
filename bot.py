from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ConversationHandler, ContextTypes

TOKEN = "7985558703:AAEkkhLy5KXBMjWVtYk7bcGUNGscCyuQmYM"

SUM_INPUT, DAYS_INPUT, PARTNER_INPUT = range(3)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("$500", callback_data="500"),
         InlineKeyboardButton("$1,000", callback_data="1000")],
        [InlineKeyboardButton("$2,500", callback_data="2500"),
         InlineKeyboardButton("$5,000", callback_data="5000")],
        [InlineKeyboardButton("$10,000", callback_data="10000"),
         InlineKeyboardButton("$50,000", callback_data="50000")],
        [InlineKeyboardButton("$250,000", callback_data="250000"),
         InlineKeyboardButton("$1,000,000", callback_data="1000000")]
    ]
    main_menu = [["üí∞ –†–∞—Å—á—ë—Ç –¥–æ—Ö–æ–¥–∞"], ["üë• –ü–∞—Ä—Ç–Ω—ë—Ä–∫–∞"], ["üîô –ù–∞–∑–∞–¥"]]
    reply_markup = ReplyKeyboardMarkup(main_menu, resize_keyboard=True)
    inline_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:", reply_markup=reply_markup)
    await update.message.reply_text("–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:", reply_markup=inline_markup)
    return SUM_INPUT

async def handle_sum(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        amount = float(text.replace("$", "").replace(",", ""))
        context.user_data['amount'] = amount
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:")
        return DAYS_INPUT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return SUM_INPUT

async def handle_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        days = int(update.message.text)
        amount = context.user_data.get('amount', 0)
        daily_income = amount * 0.005
        total_income = daily_income * days
        await update.message.reply_text(f"üíµ –í–∞—à –¥–æ—Ö–æ–¥ –∑–∞ {days} –¥–Ω–µ–π: ${total_income:,.2f}")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–∏—Å–ª–æ–º.")
        return DAYS_INPUT

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    amount = float(query.data)
    context.user_data['amount'] = amount
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:")
    return DAYS_INPUT

async def partner_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ –Ω–∞ –∫–∞–∫—É—é —Å—É–º–º—É –∫–∞–∂–¥—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3 –ø–æ 1000)?")
    return PARTNER_INPUT

async def handle_partner_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text
        num, value = map(int, text.replace("–ø–æ", "").split())
        total = num * value
        lvl1 = total * 0.15
        lvl2 = total * 0.03
        lvl3 = 10 * num
        await update.message.reply_text(
            f"üë• –ü–∞—Ä—Ç–Ω—ë—Ä–∫–∞ —Å {num} –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º–∏ –ø–æ ${value}:\n"
            f"‚Äî 1-—è –ª–∏–Ω–∏—è: ${lvl1:.2f}\n"
            f"‚Äî 2-—è –ª–∏–Ω–∏—è: ${lvl2:.2f}\n"
            f"‚Äî 3-—è –ª–∏–Ω–∏—è: ${lvl3:.2f} (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ)"
        )
        return ConversationHandler.END
    except Exception:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 5 –ø–æ 1000")
        return PARTNER_INPUT

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SUM_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_sum),
                CallbackQueryHandler(handle_button)
            ],
            DAYS_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_days)],
            PARTNER_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_partner_input)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.Regex("üí∞ –†–∞—Å—á—ë—Ç –¥–æ—Ö–æ–¥–∞"), start))
    app.add_handler(MessageHandler(filters.Regex("üë• –ü–∞—Ä—Ç–Ω—ë—Ä–∫–∞"), partner_command))
    app.add_handler(MessageHandler(filters.Regex("üîô –ù–∞–∑–∞–¥"), cancel))

    app.run_polling()

if __name__ == "__main__":
    main()
 